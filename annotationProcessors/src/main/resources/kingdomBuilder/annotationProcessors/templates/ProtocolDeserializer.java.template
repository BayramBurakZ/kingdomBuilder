package <%= packageName %>;

<%= imports %>

// Explicit import, although redundant, is used to here to combat a regression
// in IntelliJ's linter.
// See here for more: https://youtrack.jetbrains.com/issue/IDEA-255256
import <%= packageName %>.ProtocolConsumer;

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;


/**
 * Provides a static method for deserializing strings into instances of classes
 * annotated with @Protocol.
 *
 * @apiNote This class was automatically generated by {@link kingdomBuilder.annotations.ProtocolProcessor}.
 *          Any changes made to this file WILL be overwritten. If you need to change this file, then
 *          consider changing its template.
 */
public class ProtocolDeserializer {
    private static final String SERVER_MESSAGE = "[SERVER_MESSAGE]";
    private static final String REPLY_MESSAGE = "[REPLY_MESSAGE]";
    private static final String GAME_MESSAGE = "[GAME_MESSAGE]";

    public static void deserialize(String rawPacket, ProtocolConsumer consumer) {
        // The protocol for packets sent by the server defines three sections:
        // - Header -> always [SERVER_MESSAGE]
        // - Type   -> some identifier wrapped within brackets
        // - Payload -> arbitrary string wrapped between <[ and ]> or <{ and }> if its a list of tuples.
        //
        // The split gives us these three sections.
        final String[] sections = rawPacket.split(" ", 3);
        if(!sections[0].equals(SERVER_MESSAGE) && !sections[0].equals(REPLY_MESSAGE) && !sections[0].equals(GAME_MESSAGE)) {
            consumer.onFailure(rawPacket);
            return;
        }

        switch(sections[1]) {
<%= cases %>
            default:
                consumer.onFailure(rawPacket);
        }
    }

    /**
     * Splits the payload into chunks.
     * @param payload the payload to split.
     * @param components the count of components to split in.
     * @return The list of chunks.
     */
    private static List<String> split(String payload, int count) {
        if(payload.startsWith("<") && payload.endsWith(">"))
            payload = payload.substring(1, payload.length() - 1);

        if(payload.startsWith("[") && payload.endsWith("]"))
            payload = payload.substring(1, payload.length() - 1) ;

        return List.of(payload.split(";", count));
    }

    /**
     * Splits the payload, containing a list of tuples, into substrings, where
     * each substring represents a single element of the list.
     * @param payload the payload to split.
     * @return A list of substrings, where each string represents an element of the list.
     */
    private static List<String> splitList(String payload) {
        if(payload.startsWith("{") && payload.endsWith("}"))
            payload = payload.substring(1, payload.length() - 1);

        return List.of(payload.split(","));
    }

    /**
     * Parses the payload and extracts the list of integers.
     * @param payload the payload to parse.
     * @return A list containing all integers extracted from the payload.
     */
    private static List<Integer> parseIntegerList(String payload) {
        if(payload.startsWith("{") && payload.endsWith("}"))
            payload = payload.substring(1, payload.length() - 1);

        return Arrays.stream(payload.split(",|;"))
            .mapToInt(Integer::parseInt)
            .boxed()
            .collect(Collectors.toList());
    }

<%= deserializerMethods %>

}